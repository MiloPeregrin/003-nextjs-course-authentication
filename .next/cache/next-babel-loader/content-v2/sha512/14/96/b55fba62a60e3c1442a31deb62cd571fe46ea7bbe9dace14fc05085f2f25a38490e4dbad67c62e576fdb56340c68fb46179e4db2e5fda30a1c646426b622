{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { verifyPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\nexport default NextAuth({\n  session: {\n    jwt: true\n  },\n  providers: [Providers.Credentials({\n    async authorize(credentials) {\n      const client = await connectToDatabase();\n      const usersCollection = client.db().collection(\"users\");\n      const user = await usersCollection.findOne({\n        email: credentials.email\n      });\n\n      if (!user) {\n        client.close();\n        throw new Error(\"No user found\");\n      }\n\n      const isValid = await verifyPassword(credentials.password, user.password);\n\n      if (!isValid) {\n        client.close();\n        throw new Error(\"Could not log you in\");\n      }\n\n      client.close();\n      return {\n        email: user.email\n      };\n    }\n\n  })]\n});","map":{"version":3,"sources":["D:/dev/portfolio-projekty/003-nextjs-course-authentication/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","verifyPassword","connectToDatabase","session","jwt","providers","Credentials","authorize","credentials","client","usersCollection","db","collection","user","findOne","email","close","Error","isValid","password"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,eAAeH,QAAQ,CAAC;AACtBI,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GADa;AAItBC,EAAAA,SAAS,EAAE,CACTL,SAAS,CAACM,WAAV,CAAsB;AACpB,UAAMC,SAAN,CAAgBC,WAAhB,EAA6B;AAC3B,YAAMC,MAAM,GAAG,MAAMP,iBAAiB,EAAtC;AAEA,YAAMQ,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AAEA,YAAMC,IAAI,GAAG,MAAMH,eAAe,CAACI,OAAhB,CAAwB;AACzCC,QAAAA,KAAK,EAAEP,WAAW,CAACO;AADsB,OAAxB,CAAnB;;AAIA,UAAI,CAACF,IAAL,EAAW;AACTJ,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,YAAMC,OAAO,GAAG,MAAMjB,cAAc,CAClCO,WAAW,CAACW,QADsB,EAElCN,IAAI,CAACM,QAF6B,CAApC;;AAKA,UAAI,CAACD,OAAL,EAAc;AACZT,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAEDR,MAAAA,MAAM,CAACO,KAAP;AACA,aAAO;AAAED,QAAAA,KAAK,EAAEF,IAAI,CAACE;AAAd,OAAP;AACD;;AA3BmB,GAAtB,CADS;AAJW,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Providers from \"next-auth/providers\";\r\nimport { verifyPassword } from \"../../../lib/auth\";\r\nimport { connectToDatabase } from \"../../../lib/db\";\r\n\r\nexport default NextAuth({\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  providers: [\r\n    Providers.Credentials({\r\n      async authorize(credentials) {\r\n        const client = await connectToDatabase();\r\n\r\n        const usersCollection = client.db().collection(\"users\");\r\n\r\n        const user = await usersCollection.findOne({\r\n          email: credentials.email,\r\n        });\r\n\r\n        if (!user) {\r\n          client.close();\r\n          throw new Error(\"No user found\");\r\n        }\r\n\r\n        const isValid = await verifyPassword(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isValid) {\r\n          client.close();\r\n          throw new Error(\"Could not log you in\");\r\n        }\r\n\r\n        client.close();\r\n        return { email: user.email };\r\n      },\r\n    }),\r\n  ],\r\n});\r\n"]},"metadata":{},"sourceType":"module"}