{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport { connectToDatabase } from \"../../../lib/db\";\nimport { hashPassword, verifyPassword } from \"../../../lib/auth\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({\n    req: req\n  });\n\n  if (!session) {\n    res.status(401).json({\n      message: \"Not authenticated\"\n    });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"users\");\n  const user = await usersCollection.findOne({\n    email: userEmail\n  });\n\n  if (!user) {\n    res.status(404).json({\n      message: \"User not found\"\n    });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n  const passwordsAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordsAreEqual) {\n    res.status(403).json({\n      message: \"Invalid password\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n  const result = await usersCollection.updateOne({\n    email: userEmail\n  }, {\n    $set: {\n      password: hashedPassword\n    }\n  });\n  client.close();\n  res.status(200).json({\n    message: \"Password updated\"\n  });\n}\n\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}