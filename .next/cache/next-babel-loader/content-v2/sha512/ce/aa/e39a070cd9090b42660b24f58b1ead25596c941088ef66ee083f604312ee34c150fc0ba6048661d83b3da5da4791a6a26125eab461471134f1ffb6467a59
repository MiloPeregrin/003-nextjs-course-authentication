{"ast":null,"code":"import { connectToDatabase } from \"../../../lib/db\";\nimport { hashPassword } from \"../../../lib/auth\";\n\nasync function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return;\n  }\n\n  const data = req.body;\n  const {\n    email,\n    password\n  } = data;\n\n  if (!email || !email.includes(\"@\") || !password || password.trim().length < 7) {\n    res.status(422).json({\n      message: \"Invalid input - password should also be at least 7 characters long\"\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const existingUser = await db.collection(\"users\").findOne({\n    email: email\n  });\n\n  if (existingUser) {\n    res.status(422).json({\n      message: \"User exists already\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n  const result = await db.collection(\"users\").insertOne({\n    email: email,\n    password: hashedPassword\n  });\n  res.status(201).json({\n    message: \"Created user!\"\n  });\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["D:/dev/portfolio-projekty/003-nextjs-course-authentication/pages/api/auth/signup.js"],"names":["connectToDatabase","hashPassword","handler","req","res","method","data","body","email","password","includes","trim","length","status","json","message","client","db","existingUser","collection","findOne","close","hashedPassword","result","insertOne"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iBAAlC;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB;AACD;;AAED,QAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,IAA5B;;AAEA,MACE,CAACE,KAAD,IACA,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CADD,IAEA,CAACD,QAFD,IAGAA,QAAQ,CAACE,IAAT,GAAgBC,MAAhB,GAAyB,CAJ3B,EAKE;AACAR,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACL;AAFiB,KAArB;AAKA;AACD;;AAED,QAAMC,MAAM,GAAG,MAAMhB,iBAAiB,EAAtC;AAEA,QAAMiB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAEZ,IAAAA,KAAK,EAAEA;AAAT,GAA/B,CAA3B;;AAEA,MAAIU,YAAJ,EAAkB;AAChBd,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAC,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,cAAc,GAAG,MAAMrB,YAAY,CAACQ,QAAD,CAAzC;AAEA,QAAMc,MAAM,GAAG,MAAMN,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBK,SAAvB,CAAiC;AACpDhB,IAAAA,KAAK,EAAEA,KAD6C;AAEpDC,IAAAA,QAAQ,EAAEa;AAF0C,GAAjC,CAArB;AAKAlB,EAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACAC,EAAAA,MAAM,CAACK,KAAP;AACD;;AAED,eAAenB,OAAf","sourcesContent":["import { connectToDatabase } from \"../../../lib/db\";\r\nimport { hashPassword } from \"../../../lib/auth\";\r\n\r\nasync function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return;\r\n  }\r\n\r\n  const data = req.body;\r\n\r\n  const { email, password } = data;\r\n\r\n  if (\r\n    !email ||\r\n    !email.includes(\"@\") ||\r\n    !password ||\r\n    password.trim().length < 7\r\n  ) {\r\n    res.status(422).json({\r\n      message:\r\n        \"Invalid input - password should also be at least 7 characters long\",\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  const client = await connectToDatabase();\r\n\r\n  const db = client.db();\r\n\r\n  const existingUser = await db.collection(\"users\").findOne({ email: email });\r\n\r\n  if (existingUser) {\r\n    res.status(422).json({ message: \"User exists already\" });\r\n    client.close();\r\n    return;\r\n  }\r\n\r\n  const hashedPassword = await hashPassword(password);\r\n\r\n  const result = await db.collection(\"users\").insertOne({\r\n    email: email,\r\n    password: hashedPassword,\r\n  });\r\n\r\n  res.status(201).json({ message: \"Created user!\" });\r\n  client.close();\r\n}\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}